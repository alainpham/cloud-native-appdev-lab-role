---
- set_fact:
    appname: kafka

- name: Create {{appname}} folders
  become: true
  file:
    path: /home/{{ ansible_user }}/apps/{{appname}}/data
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create {{appname}} folders
  become: true
  file:
    path: /home/{{ ansible_user }}/apps/{{appname}}/data/zookeeper
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create {{appname}} folders
  become: true
  file:
    path: /home/{{ ansible_user }}/apps/{{appname}}/data/broker
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Create {{appname}} folders
  become: true
  file:
    path: /home/{{ ansible_user }}/apps/{{appname}}/config
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy config {{appname}} config
  copy:
    src: "templates/{{appname}}/config/"
    dest: /home/{{ ansible_user }}/apps/{{appname}}/config/
    mode: '0644'

- name: "Manage zookeeper container state - {{appstate}} - {{appconfig.zookeeper.ip}}"
  docker_container:
    name: "zookeeper"
    image: "{{appconfig[appname].image}}"
    state: "{{appstate}}"
    recreate: "{{recreate}}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "1000:1000"
    command: bin/zookeeper-server-start.sh config/zookeeper.properties 
    env:
      LOG_DIR: /tmp/logs
      KAFKA_OPTS: -javaagent:/opt/kafka/libs/jmx_prometheus_javaagent-0.16.1.jar=9779:/config/zookeeper-metrics-config.yml
    ports:
    labels: |
      {
        "traefik.enable": "true",
        "traefik.http.services.zookeeper-metrics.loadbalancer.server.port": "9779",
        "traefik.http.routers.zookeeper-metrics.entrypoints": "http",
        "traefik.http.routers.zookeeper-metrics.rule": "Host(`zookeeper-metrics.{{ansible_hostname}}.lan`)",
        "traefik.http.routers.zookeeper-metrics.tls": "false",
      }
    volumes:
      - "/home/{{ansible_user}}/apps/{{appname}}/data/zookeeper:/tmp/zookeeper:rw"
      - "/home/{{ansible_user}}/apps/{{appname}}/config://config:ro"
    networks_cli_compatible: yes
    network_mode: primenet
    networks:
      - name: primenet
        ipv4_address: "{{appconfig.zookeeper.ip}}"

- name: "Manage {{appname}} container state - {{appstate}} - {{appconfig[appname].ip}}"
  docker_container:
    name: "{{appname}}"
    image: "{{appconfig[appname].image}}"
    state: "{{appstate}}"
    recreate: "{{recreate}}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "1000:1000"
    command: 
      - bin/kafka-server-start.sh config/server.properties 
      - --override listeners=PLAINTEXT://0.0.0.0:9092,SSL://0.0.0.0:9093 
      - --override advertised.listeners=PLAINTEXT://{{appconfig[appname].ip}}:9092,SSL://kafka.{{ansible_hostname}}.lan:443 
      - --override ssl.keystore.location=/certs/{{ansible_hostname}}.p12 
      - --override ssl.keystore.password=password
      - --override ssl.key.password=password
      - --override zookeeper.connect=zookeeper:2181
      - --override log.dirs=/kafka-data
    env:
      LOG_DIR: /tmp/logs
      KAFKA_OPTS: -javaagent:/opt/kafka/libs/jmx_prometheus_javaagent-0.16.1.jar=9779:/config/kafka-metrics-config.yml
    ports:
    labels: |
      {
        "traefik.enable": "true",

        "traefik.tcp.services.{{appname}}.loadbalancer.server.port": "9093",
        "traefik.tcp.routers.{{appname}}.entrypoints": "https",
        "traefik.tcp.routers.{{appname}}.tls": "true",
        "traefik.tcp.routers.{{appname}}.tls.passthrough": "true",
        "traefik.tcp.routers.{{appname}}.rule": "HostSNI(`{{appname}}.{{ansible_hostname}}.lan`)",
        "traefik.tcp.routers.{{appname}}.service": "{{appname}}",

        "traefik.http.services.kafka-metrics.loadbalancer.server.port": "9779",
        "traefik.http.routers.kafka-metrics.entrypoints": "http",
        "traefik.http.routers.kafka-metrics.rule": "Host(`kafka-metrics.{{ansible_hostname}}.lan`)",
        "traefik.http.routers.kafka-metrics.tls": "false",
      }
    volumes:
      - "/home/{{ansible_user}}/apps/{{appname}}/data/broker:/kafka-data:rw"
      - "/home/{{ansible_user}}/apps/{{appname}}/config://config:ro"
      - "/home/{{ansible_user}}/apps/tls:/certs:ro"
    networks_cli_compatible: yes
    network_mode: primenet
    networks:
      - name: primenet
        ipv4_address: "{{appconfig[appname].ip}}"


- name: "Manage kafdrop container state - {{appstate}} - {{appconfig.kafkdrop.ip}}"
  docker_container:
    name: "kafdrop"
    image: "{{appconfig.kafdrop.image}}"
    state: "{{appstate}}"
    recreate: "{{recreate}}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "1000:1000"
    command:
    env:
      KAFKA_BROKERCONNECT: "{{appconfig[appname].ip}}:9092"
      JVM_OPTS: -Xms32M -Xmx128M
      SERVER_SERVLET_CONTEXTPATH : "/"
    ports:
    labels: |
      {
        "traefik.http.services.kafdrop.loadbalancer.server.port": "9000",
        "traefik.http.routers.kafdrop.entrypoints": "https",
        "traefik.http.routers.kafdrop.tls": "true",
      }
    volumes:
    networks_cli_compatible: yes
    network_mode: primenet
    networks:
      - name: primenet
        ipv4_address: "{{appconfig.kafdrop.ip}}"


- name: "Manage kafkaexporter container state - {{appstate}} - {{appconfig.kafkaexporter.ip}}"
  docker_container:
    name: "kafkaexporter"
    image: "{{appconfig[appname].image}}"
    state: "{{appstate}}"
    recreate: "{{recreate}}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "1000:1000"
    command: "/opt/kafka-exporter/kafka_exporter --kafka.server={{appconfig[appname].ip}}:9092"
    env:
    labels: |
      {
        "traefik.http.services.kafkaexporter.loadbalancer.server.port": "9308",
        "traefik.http.routers.kafkaexporter.entrypoints": "http",
        "traefik.http.routers.kafkaexporter.tls": "false",
      }
    volumes:
    networks_cli_compatible: yes
    network_mode: primenet
    networks:
      - name: primenet
        ipv4_address: "{{appconfig.kafkaexporter.ip}}"


- name: "Manage kafkaui container state - {{appstate}} - {{appconfig.kafkaui.ip}}"
  docker_container:
    name: "kafkaui"
    image: "{{appconfig.kafkaui.image}}"
    state: "{{appstate}}"
    recreate: "{{recreate}}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "1000:1000"
    command:
    env:
      KAFKA_CLUSTERS_0_NAME: kafka.work.lan
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "{{appconfig[appname].ip}}:9092"
    ports:
    labels: |
      {
        "traefik.http.services.kafkaui.loadbalancer.server.port": "8080",
        "traefik.http.routers.kafkaui.entrypoints": "https",
        "traefik.http.routers.kafkaui.tls": "true",
      }
    volumes:
    networks_cli_compatible: yes
    network_mode: primenet
    networks:
      - name: primenet
        ipv4_address: "{{appconfig.kafkaui.ip}}"