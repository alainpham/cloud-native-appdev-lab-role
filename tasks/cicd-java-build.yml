- name: Create {{appname}} folders
  when: item.cleanStart
  file:
    path: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/
    state: absent
  loop: "{{apps}}"

- name: Create {{appname}} folders
  file:
    path: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/
    state: directory
  loop: "{{apps}}"

- name: git clone
  git: 
    repo: "{{item.repo}}"
    dest: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/
    version: "{{item.version}}"
  loop: "{{apps}}"

- name: create branch for version
  when: '"SNAPSHOT" not in item.buildVersion'
  shell: |
    git checkout {{item.buildVersion}} || git checkout -b {{item.buildVersion}}
  args:
    chdir: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/
  loop: "{{apps}}"

- name: set version
  shell: |
    mvn versions:set -DgenerateBackupPoms=false -DnewVersion={{item.buildVersion}}
  args:
    chdir: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/
  loop: "{{apps}}"

- name: maven package
  shell: |
    mvn package -DskipTests
  args:
    chdir: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/
  loop: "{{apps}}"

- name: package folder
  when: item.type == 'folder'
  community.general.archive:
    path: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/{{ item.artifact }}
    dest: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/target/{{item.artifactId}}-{{ item.buildVersion }}.tar.gz
  loop: "{{apps}}"

- name: maven deploy on central repo
  when: item.type == 'folder'
  shell: |
    mvn deploy:deploy-file \
      -DgroupId={{ item.groupId }} \
      -DartifactId={{ item.artifactId }} \
      -Dversion={{ item.buildVersion }} \
      -Dpackaging=tar.gz \
      -Durl={{ item.mavenrepo }} \
      -Dfile=/home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/target/{{item.artifactId}}-{{ item.buildVersion }}.tar.gz
  loop: "{{apps}}"

- name: commit new version
  when: '"SNAPSHOT" not in item.buildVersion'
  shell: |
    if [ -z "$(git status --porcelain)" ]; then 
      echo "NOTHING_TO_COMMIT"
    else 
      # Uncommitted changes
      git commit -a -m "new branch for {{item.buildVersion}}"
    fi
  args:
    chdir: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/
  loop: "{{apps}}"
  register: result
  changed_when: result.stdout != 'NOTHING_TO_COMMIT'

- name: push branch
  when: '"SNAPSHOT" not in item.buildVersion'
  shell: git push origin {{item.buildVersion}}
  args:
    chdir: /home/{{ ansible_user }}/sources/{{item.groupId}}/{{item.artifactId}}/{{item.subfolder}}/
  loop: "{{apps}}"
  register: pushresult
  changed_when: 
    - pushresult.rc == 0
    - pushresult.stderr != 'Everything up-to-date'

# - debug:
#     msg: "{{pushresult}}"

# - debug:
#     msg: "{{containerbuidresult}}"

# - name: print reg 
#   debug: 
#     msg: "{{item.1}}/{{item.0.artifactId}}:latest"
#   with_subelements: 
#     - "{{apps}}"
#     - registries

# - name: print repos
#   shell: |
#     docker tag {{artifactId}}:{{targetVersion}} 
#   with_subelements: 
#     - "{{apps}}"
#     - registries